package tictactoe;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        // write your code here

        Scanner scanner = new Scanner(System.in);

        char[] gameSymb = {'_', 'O', 'X' };
        char [] lineDispSymb = {' ', '|', '\n'};
        char [] borderDispSymb = {'-'};

        byte colCount = 3;
        byte lineCount = 3;
        // byte borderDispSymbCount =  (colCount + 1) *2 + 1 // last char lacks space

        // input game state
        boolean isGameInputInvalid = true;
        String gameInput = "";
        while (isGameInputInvalid) {
            System.out.print("Enter cells: ");
            gameInput = scanner.nextLine();

            if (gameInput.length() == colCount * lineCount) {
                // simplistic validation here
                isGameInputInvalid = false;
            }
        }

        // fill gameBoard with gameInput values
        // default filled with 0s which is gameSymb[0] == '_'
        byte[][] gameBoard = new byte[lineCount][colCount];
        for (int l = 0; l < lineCount; l++) {
            for (int c = 0; c < colCount; c++) {
                if (gameInput.charAt(c + l*colCount) == gameSymb[0]) {
                    gameBoard[l][c] = 0;
                } else  if (gameInput.charAt(c + l*colCount) == gameSymb[1]) {
                    gameBoard[l][c] = 1;
                } else  if (gameInput.charAt(c + l*colCount) == gameSymb[2]) {
                    gameBoard[l][c] = 2;
                } else {
                    System.out.println("Game Input error unrecognized symbol");
                }
            }
        }


        // Display the game board

        // display top border
        for (int i = 0 ; i < (colCount + 1) *2; i++ ) {
            System.out.print(borderDispSymb[0]);
        }
        System.out.println(borderDispSymb[0]);


        for (int l = 0; l < lineCount; l++) {
            System.out.printf("%c%c", lineDispSymb[1], lineDispSymb[0]);

            for (int c = 0; c < colCount; c++) {
                System.out.printf("%c%c", gameSymb[gameBoard[l][c]], lineDispSymb[0]);
            }
            System.out.printf("%c%c", lineDispSymb[1], lineDispSymb[2]);
        }



         // display bottom border
        for (int i = 0 ; i < (colCount + 1) *2; i++ ) {
            System.out.print(borderDispSymb[0]);
        }
            System.out.println(borderDispSymb[0]);

        ///////////////////////////////////////////////////////////////
        // Evaluate game state
        //////////////////////////////////////////////////////////////

        String[] gameStateText = {"Parsing", "Game not finished", "Draw", "X wins", "O wins", "Impossible"};
        int gameState = 0; // Parsing
        byte[] countOfXInARow = {0, 0, 0}; // gameSymb[2]
        byte[] countOfOInARow =  {0, 0, 0}; // gameSymb[1]
        byte[] countOfXInACol =  {0, 0, 0};
        byte[] countOfOInACol =  {0, 0, 0};
        byte[] countOfXInADiag =  {0, 0};
        byte[] countOfOInADiag =  {0, 0};


        // repeat the search horizontally, vertically and diagonally
//        while (gameState == 0) {

        // scan horizontally for same symbol
            for (int l = 0; l < lineCount; l++) {
              for (int c = 0 ; c < colCount; c++) {
                  byte currentGameCell = gameBoard[l][c];
//                    if (currentGameCell == 0) {
//                        gameState = 1; // Game not finished
//                        break;
//                    }
                    if (currentGameCell == 1) {
                        countOfOInARow[l]++ ;
                    }
                    else if (currentGameCell == 2) {
                      countOfXInARow[l]++;
                  }
                    else  {
                       continue;
                    }
                  }
//                if (gameState == 1) { break;}

                }
//            if (gameState == 1) { break;}


             // scan vertically for same symbol
            for (int c = 0; c < colCount; c++) {
              for (int l = 0 ; l < lineCount; l++) {
                  byte currentGameCell = gameBoard[l][c];
//                    if (currentGameCell == 0) {
//                        gameState = 1; // Game not finished
//                        break;
//                    }
                    if (currentGameCell == 1) {
                        countOfOInACol[l]++ ;
                    }
                    else if (currentGameCell == 2) {
                      countOfXInACol[l]++;
                  }
                    else {
                     continue;
                    }
                  }
//                if (gameState == 1) { break;}

                }
//            if (gameState == 1) { break;}


                // scan first diagonale for same symbol
            for (int d = 0; d < colCount; d++) {
                  byte currentGameCell = gameBoard[d][d];
//                    if (currentGameCell == 0) {
//                        gameState = 1; // Game not finished
//                        break;
//                    }
                    if (currentGameCell == 1) {
                        countOfOInADiag[0]++ ;
                    }
                    else if (currentGameCell == 2) {
                      countOfXInADiag[0]++;
                  }
                    else {
                      continue;
                    }

                }
//            if (gameState == 1) { break;}

                  // scan second diagonale for same symbol
            for (int d = 0; d < colCount; d++) {
                  byte currentGameCell = gameBoard[d][colCount-1-d];
//                    if (currentGameCell == 0) {
//                        gameState = 1; // Game not finished
//                        break;
//                    }
                    if (currentGameCell == 1) {
                        countOfOInADiag[1]++ ;
                    }
                    else if (currentGameCell == 2) {
                      countOfXInADiag[1]++;
                  }
                    else {
                     continue;
                    }

                }
//            if (gameState == 1) { break;}

//            } // while


        /////////////////////////////////////////////
//        if (gameState == 1) {
//            System.out.println(gameStateText[1]);
//        }
//        else {

        byte gameWinner = 0;

                 // scan horizontally for same symbol
                for (int l = 0; l < lineCount; l++) {
                    if (countOfOInARow[l] == colCount) {
                        gameState = 4; // O
                    }
                    else {
                        gameState = 3; // X
                    }
                }

                   // scan vertically for same symbol
                for (int c = 0; c < colCount; c++) {
                    if (countOfOInACol[c] == lineCount) {
                        gameState = 4; // O
                    }
                    else {
                        gameState = 3; // X
                    }
                }

            //////////////////////////////



    }
}
